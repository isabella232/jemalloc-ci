# -*- python -*-
# ex: set filetype=python:

import json
import os

from buildbot.plugins import changes, schedulers, util, worker
from buildbot.plugins import reporters
from buildbot.steps.source.git import Git
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Configure
from buildbot.steps.shell import ShellCommand

from git_hub_pullrequest_poller import GitHubPullrequestPoller
from git_hub_status_push import GitHubStatusPush

def parseConfig(filename):
    with open(filename) as f:
        return json.loads(f.read())

PUBLIC = parseConfig(os.path.expanduser('~/secrets/public.json'))
FREEBSD_BB_SECRETS = parseConfig(os.path.expanduser(
    '~/secrets/freebsd_bb_secrets.json'))
UBUNTU_BB_SECRETS = parseConfig(os.path.expanduser(
    '~/secrets/ubuntu_bb_secrets.json'))
ARM_BB_SECRETS = parseConfig(os.path.expanduser(
    '~/secrets/arm_bb_secrets.json'))
MASTER_BB_SECRETS = parseConfig(os.path.expanduser(
    '~/secrets/master_bb_secrets.json'))

GITHUB_TRUSTED_USERS = set(PUBLIC['github_trusted_users'])
GIT_REPO='git://github.com/{}/{}.git'.format(
        PUBLIC['github_organization'], PUBLIC['github_repo'])

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

# Our workers right now are pretty low-end, so we set max_builds=1 to avoid
# ooming.

c['workers'] = []
c['workers'].append(
    worker.Worker(
        FREEBSD_BB_SECRETS['bb_un'],
        FREEBSD_BB_SECRETS['bb_pw'],
        max_builds=1,
    )
)
c['workers'].append(
    worker.Worker(
        UBUNTU_BB_SECRETS['bb_un'],
        UBUNTU_BB_SECRETS['bb_pw'],
        max_builds=1,
    )
)
c['workers'].append(
    worker.Worker(
        ARM_BB_SECRETS['bb_un'],
        ARM_BB_SECRETS['bb_pw'],
        max_builds=1,
    )
)


# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(
    changes.GitPoller(
        GIT_REPO, workdir='gitpoller-workdir', branch='dev', pollinterval=60))
c['change_source'].append(
    GitHubPullrequestPoller(
        owner=PUBLIC['github_organization'],
        repo=PUBLIC['github_repo'],
        token=MASTER_BB_SECRETS['github_access_token'],
        repository_type='git',
        pollInterval=30,
        pollAtLaunch=True))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

def genFactory(make_name, configure_args):
    factory = util.BuildFactory()
    factory.addStep(
        Git(
            repourl=util.Interpolate("%(prop:repository)s"),
            # TODO: mode='incremental' code make builds faster, but the build
            # system is not completely hermetic right now.
            mode='full'))
    factory.addStep(ShellCommand(command=["autoconf"]))
    factory.addStep(Configure(command=(["./configure"] + configure_args)))
    factory.addStep(Compile(command=[make_name, "tests"]))
    factory.addStep(ShellCommand(command=[make_name, "check"]))
    factory.addStep(ShellCommand(command=[make_name, "clean"]))
    return factory

configurations = [
    [],
    ["--enable-debug"],
    ["--enable-debug", "--enable-prof"],
    ["--enable-debug", "--disable-stats"],
    ['--enable-debug', '--with-malloc-conf=tcache:false'],
    ['--enable-debug', '--with-malloc-conf=background_thread:true'],
    ['--enable-debug', '--with-jemalloc-prefix=ci_test_'],
]

ALL_BUILDER_NAMES = []

c['builders'] = []
# A clang-format check.
clang_format_factory = util.BuildFactory()
clang_format_factory.addStep(
    Git(repourl=util.Interpolate("%(prop:repository)s"), mode='full'))
clang_format_factory.addStep(ShellCommand(command=["scripts/check-formatting.sh"]))

c['builders'].append(
    util.BuilderConfig(
        name="clang-format",
        workernames=["ubuntu-worker"],
        factory=clang_format_factory))
ALL_BUILDER_NAMES.append("clang-format")

for configuration in configurations:
    # ARM doesn't support profiling.
    if "--enable-prof" not in configuration:
        arm_name = "arm(" + ", ".join(configuration) + ")"
        ALL_BUILDER_NAMES.append(arm_name)
        c['builders'].append(
            util.BuilderConfig(
                name=arm_name,
                workernames=["arm-worker"],
                factory=genFactory("make", configuration)))
    # Ubuntu (i.e. x86 ubuntu)
    ubuntu_name = "ubuntu(" + ", ".join(configuration) + ")"
    ALL_BUILDER_NAMES.append(ubuntu_name)
    c['builders'].append(
        util.BuilderConfig(
            name=ubuntu_name,
            workernames=["ubuntu-worker"],
            factory=genFactory("make", configuration)))
    # FreeBSD
    if "--with-malloc-conf=background_thread:true" not in configuration:
        freebsd_name = "freebsd(" + ", ".join(configuration) + ")"
        ALL_BUILDER_NAMES.append(freebsd_name)
        c['builders'].append(
            util.BuilderConfig(
                name=freebsd_name,
                workernames=["freebsd-worker"],
                factory=genFactory("gmake", configuration)))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = []
c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name="devBranchScheduler",
        change_filter=util.ChangeFilter(branch='dev'),
        treeStableTimer=None,
        builderNames=ALL_BUILDER_NAMES))
c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name="all",
        change_filter=util.ChangeFilter(filter_fn=lambda change: True),
        treeStableTimer=None,
        builderNames=ALL_BUILDER_NAMES))



####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []
c['services'].append(
    GitHubStatusPush(
        destRepoOwner=PUBLIC['github_organization'],
        destRepoName=PUBLIC['github_repo'],
        token=MASTER_BB_SECRETS['github_access_token'],
        context=util.Interpolate("ci/%(prop:buildername)s"),
        startDescription='Build started.',
        endDescription='Build done.',
        verbose=True,
    )
)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Jemalloc"
c['titleURL'] = "http://jemalloc.net/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://%s/" % PUBLIC['master_host']

# minimalistic config to activate new web UI
c['www'] = dict(
    port=8010,
    plugins=dict(waterfall_view={}, console_view={}),
)

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
